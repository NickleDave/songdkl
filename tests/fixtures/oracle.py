"""Fixtures for "oracle" data
generated by running the original
PLOS Comp. Bio. scripts
"""
import pandas as pd
import pytest

from .data import GENERATED_DATA_ROOT


THRESHOLD_VALS_NPYS = sorted(GENERATED_DATA_ROOT.glob('*threshold-vals.npy'))


@pytest.fixture(params=THRESHOLD_VALS_NPYS)
def threshold_val_npy(request):
    return request.param


SLICE_CSVS = sorted(GENERATED_DATA_ROOT.glob('*slices.csv'))

SLICE_DFS = {}
for slice_csv in SLICE_CSVS:
    bird_id = slice_csv.name.split('-')[0]
    slice_df = pd.read_csv(slice_csv)
    SLICE_DFS[bird_id] = slice_df


@pytest.fixture()
def pcb_script_slice_df_factory():
    """Returns ``pandas.DataFrame`` contain
    slice start and stop indices computed by
    the PLOS Comp. Bio script
    for a given bird ID.
    """
    def _slice_df_factory(bird_id):
        return SLICE_DFS[bird_id]

    return _slice_df_factory


SEG_IOU_CSV = GENERATED_DATA_ROOT / 'segmentation-iou.csv'

SEG_IOU_DF = pd.read_csv(SEG_IOU_CSV)


@pytest.fixture
def segmentation_iou_factory():
    """Factory that returns rows of DataFrame matching
    specified bird_id, wav_path, and threshold_method.

    This should only be one row,
    with a specific Intersection-Over-Union value.

    The unit test that uses this fixture
    takes this to be the expected IOU value
    that should match what is computed
    in the unit test.
    """
    def _segmentation_iou_factory(
            bird_id,
            wav_path,
            threshold_method,
    ):
        return SEG_IOU_DF[
            (SEG_IOU_DF.bird_id == bird_id) &
            (SEG_IOU_DF.wav_path == wav_path) &
            (SEG_IOU_DF.threshold_method == threshold_method)
        ]
    return _segmentation_iou_factory
